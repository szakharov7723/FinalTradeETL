{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "bchadfetl"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PriceAPIcollection')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PriceAPI",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CosmosDbSqlApiCollection",
				"schema": {},
				"typeProperties": {
					"collectionName": "TickpriceAPI_BCH"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pricestreamtrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PriceStream",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 5,
						"startTime": "2021-02-18T19:23:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CalendarJoin",
								"type": "DatasetReference"
							},
							"name": "Calendar"
						},
						{
							"dataset": {
								"referenceName": "NoSQLRSS",
								"type": "DatasetReference"
							},
							"name": "RSSparseSource"
						},
						{
							"dataset": {
								"referenceName": "NoSQLReddit",
								"type": "DatasetReference"
							},
							"name": "RedditparseSource"
						},
						{
							"dataset": {
								"referenceName": "PriceAPIcollection",
								"type": "DatasetReference"
							},
							"name": "Pricecollection"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "FinalBCHtrading",
								"type": "DatasetReference"
							},
							"name": "FinalFeed"
						}
					],
					"transformations": [
						{
							"name": "RSSscore"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Join2"
						},
						{
							"name": "RedditScores"
						},
						{
							"name": "Join3"
						},
						{
							"name": "PriceHistory"
						},
						{
							"name": "RSSaggregate"
						},
						{
							"name": "RedditAggregate"
						},
						{
							"name": "PriceAggregate"
						},
						{
							"name": "FinalData"
						}
					],
					"script": "source(output(\n\t\tCalendarDate as date,\n\t\tCalendarDatetime as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT  * FROM [dbo].[Calendar]\\nWHERE  CalendarDate = convert(date, getdate(), 1) ',\n\tformat: 'query') ~> Calendar\nsource(output(\n\t\tdate as timestamp,\n\t\t{sentiment score} as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tquery: 'SELECT RSSparsedBCHnews.date,\\nRSSparsedBCHnews[\"sentiment score\"] \\n\\n FROM RSSparsedBCHnews\\nWHERE RSSparsedBCHnews.date  != null',\n\tformat: 'documentQuery',\n\tsystemColumns: false) ~> RSSparseSource\nsource(output(\n\t\tDate as timestamp,\n\t\t{body sentiment score} as double,\n\t\t{title sentiment score} as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tquery: 'SELECT APIparsedBCHnews.Date,\\nAPIparsedBCHnews[\"title sentiment score\"],\\nAPIparsedBCHnews[\"body sentiment score\"]\\nFROM APIparsedBCHnews\\nWHERE APIparsedBCHnews.Date  != null',\n\tformat: 'documentQuery',\n\tsystemColumns: false) ~> RedditparseSource\nsource(output(\n\t\tlast_trade_price as double,\n\t\ttimestamp as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'document') ~> Pricecollection\nRSSparseSource derive(date = toDate(date)) ~> RSSscore\nCalendar, RedditAggregate join(CalendarDate == Date,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join1\nJoin1, RSSaggregate join(CalendarDate == RSSaggregate@date,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join2\nRedditparseSource derive(Date = toDate(Date)) ~> RedditScores\nJoin2, PriceAggregate join(CalendarDate == timestamp,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join3\nPricecollection derive(timestamp = toDate(timestamp)) ~> PriceHistory\nRSSscore aggregate(groupBy(date),\n\t{sentiment score} = mean(iifNull({sentiment score},0))) ~> RSSaggregate\nRedditScores aggregate(groupBy(Date),\n\t{body sentiment score} = mean(iifNull({body sentiment score},0)),\n\t\t{title sentiment score} = mean(iifNull({title sentiment score},0))) ~> RedditAggregate\nPriceHistory aggregate(groupBy(timestamp),\n\tlast_trade_price = mean(iifNull({last_trade_price},0))) ~> PriceAggregate\nJoin3 derive({Total sentiment} = ({body sentiment score}+{title sentiment score}+{sentiment score})/3) ~> FinalData\nFinalData sink(input(\n\t\tTradeDate as date,\n\t\tBCHprice as double,\n\t\tFinalSentiment as double\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tTradeDate = CalendarDate,\n\t\tBCHprice = last_trade_price,\n\t\tFinalSentiment = {Total sentiment}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> FinalFeed"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/PriceAPIcollection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Marketdatacollection')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "BCH_data_aggregate_compile",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "RSSsentimentParser",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "RedditSentimentsParser",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Calendar": {},
									"RSSparseSource": {},
									"RedditparseSource": {},
									"Pricecollection": {},
									"FinalFeed": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "RedditSentimentsParser",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/ETLops/ForumParse&Load",
							"libraries": [
								{
									"pypi": {
										"package": "pandas"
									}
								},
								{
									"pypi": {
										"package": "datetime"
									}
								},
								{
									"pypi": {
										"package": "psaw"
									}
								},
								{
									"pypi": {
										"package": "nltk"
									}
								},
								{
									"pypi": {
										"package": "azure-cosmos"
									}
								}
							]
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "RSSsentimentParser",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/ETLops/NewsParse&Load",
							"libraries": [
								{
									"pypi": {
										"package": "pandas"
									}
								},
								{
									"pypi": {
										"package": "feedparser"
									}
								},
								{
									"pypi": {
										"package": "beautifulsoup4"
									}
								},
								{
									"pypi": {
										"package": "urllib3"
									}
								}
							]
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ForecastMLdataops",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "BCH_data_aggregate_compile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/ETLops/AzureMLcryptofcst",
							"libraries": [
								{
									"pypi": {
										"package": "scikit-learn==0.22.1"
									}
								},
								{
									"pypi": {
										"package": "pyodbc"
									}
								},
								{
									"pypi": {
										"package": "azureml-core"
									}
								},
								{
									"pypi": {
										"package": "azureml-mlflow"
									}
								},
								{
									"pypi": {
										"package": "azureml-sdk[notebooks]"
									}
								},
								{
									"pypi": {
										"package": "DateTime"
									}
								},
								{
									"pypi": {
										"package": "joblib"
									}
								},
								{
									"pypi": {
										"package": "pandas"
									}
								},
								{
									"pypi": {
										"package": "numpy"
									}
								},
								{
									"pypi": {
										"package": "azure-cosmos"
									}
								},
								{
									"maven": {
										"coordinates": "com.microsoft.azure:azure-sqldb-spark:1.0.2"
									}
								},
								{
									"pypi": {
										"package": "azureml-interpret"
									}
								},
								{
									"pypi": {
										"package": "pyspark"
									}
								},
								{
									"pypi": {
										"package": "nltk"
									}
								}
							]
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks1",
							"type": "LinkedServiceReference"
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-02-18T03:52:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Datacomplie')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Marketdatacollection",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-02-18T19:31:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								12
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Marketdatacollection')]"
			]
		}
	]
}