{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "bchadfetl"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "PriceAPIcollection",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "CalendarJoin",
								"type": "DatasetReference"
							},
							"name": "Calendar"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DailySQLconector",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Dailyprice"
						},
						{
							"name": "Join1"
						}
					],
					"script": "source(output(\n\t\tlast_trade_price as double,\n\t\ttimestamp as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tformat: 'document',\n\tsystemColumns: false) ~> source1\nsource(output(\n\t\tCalendarDate as date,\n\t\tCalendarDatetime as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT  * FROM [dbo].[Calendar]\\nWHERE  CalendarDate = convert(date, getdate(), 1) ',\n\tformat: 'query') ~> Calendar\nsource1 derive(timestamp = toDate(timestamp)) ~> DerivedColumn1\nJoin1 aggregate(groupBy(timestamp),\n\tlast_trade_price = mean(last_trade_price)) ~> Dailyprice\nDerivedColumn1, Calendar join(timestamp == CalendarDate,\n\tjoinType:'right',\n\tbroadcast: 'auto')~> Join1\nDailyprice sink(input(\n\t\tDate_price as date,\n\t\tLast_trade_price as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tDate_price = timestamp,\n\t\tLast_trade_price = last_trade_price\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CalendarJoin",
								"type": "DatasetReference"
							},
							"name": "Calendar"
						},
						{
							"dataset": {
								"referenceName": "NoSQLRSS",
								"type": "DatasetReference"
							},
							"name": "RSSparseSource"
						},
						{
							"dataset": {
								"referenceName": "NoSQLReddit",
								"type": "DatasetReference"
							},
							"name": "RedditparseSource"
						},
						{
							"dataset": {
								"referenceName": "DailySQLconector",
								"type": "DatasetReference"
							},
							"name": "PriceHist"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "FinalBCHtrading",
								"type": "DatasetReference"
							},
							"name": "FinalFeed"
						}
					],
					"transformations": [
						{
							"name": "RSSscore"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Join2"
						},
						{
							"name": "RedditScores"
						},
						{
							"name": "Join3"
						},
						{
							"name": "FinalDataAggregate"
						}
					],
					"script": "source(output(\n\t\tCalendarDate as date,\n\t\tCalendarDatetime as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT  * FROM [dbo].[Calendar]\\nWHERE  CalendarDate = convert(date, getdate(), 1) ',\n\tformat: 'query') ~> Calendar\nsource(output(\n\t\tdate as timestamp,\n\t\t{sentiment score} as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tquery: 'SELECT RSSparsedBCHnews.date,\\nRSSparsedBCHnews[\"sentiment score\"] \\n\\n FROM RSSparsedBCHnews\\nWHERE RSSparsedBCHnews.date  != null',\n\tformat: 'documentQuery',\n\tsystemColumns: false) ~> RSSparseSource\nsource(output(\n\t\tDate as timestamp,\n\t\t{body sentiment score} as double,\n\t\t{title sentiment score} as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tquery: 'SELECT APIparsedBCHnews.Date,\\nAPIparsedBCHnews[\"title sentiment score\"],\\nAPIparsedBCHnews[\"body sentiment score\"]\\n\\n FROM APIparsedBCHnews',\n\tformat: 'documentQuery',\n\tsystemColumns: false) ~> RedditparseSource\nsource(output(\n\t\tDate_price as date,\n\t\tLast_trade_price as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> PriceHist\nRSSparseSource derive(date = toDate(date)) ~> RSSscore\nRSSscore, Calendar join(CalendarDate == date,\n\tjoinType:'right',\n\tbroadcast: 'auto')~> Join1\nJoin1, RedditScores join(CalendarDate == RedditScores@Date,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join2\nRedditparseSource derive(Date = toDate(Date)) ~> RedditScores\nJoin2, PriceHist join(CalendarDate == Date_price,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join3\nJoin3 aggregate(groupBy(CalendarDate),\n\t{sentiment score} = mean({sentiment score}),\n\t\t{body sentiment score} = mean({body sentiment score}),\n\t\t{title sentiment score} = mean({title sentiment score}),\n\t\tLast_trade_price = mean(Last_trade_price),\n\t\t{total sentiment} = (mean(iifNull({sentiment score},0))+mean(iifNull({body sentiment score},0))+mean(iifNull({title sentiment score},0))) / (countIf(iifNull({sentiment score},0)!=0,1) + countIf(iifNull({body sentiment score},0)!=0,1) + countIf(iifNull({title sentiment score},0)!=0,1))) ~> FinalDataAggregate\nFinalDataAggregate sink(input(\n\t\tTradeDate as date,\n\t\tBCHprice as double,\n\t\tFinalSentiment as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tTradeDate = CalendarDate,\n\t\tBCHprice = Last_trade_price,\n\t\tFinalSentiment = {total sentiment}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> FinalFeed"
				}
			},
			"dependsOn": []
		}
	]
}