{
	"name": "dataflow2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CalendarJoin",
						"type": "DatasetReference"
					},
					"name": "Calendar"
				},
				{
					"dataset": {
						"referenceName": "NoSQLRSS",
						"type": "DatasetReference"
					},
					"name": "RSSparseSource"
				},
				{
					"dataset": {
						"referenceName": "NoSQLReddit",
						"type": "DatasetReference"
					},
					"name": "RedditparseSource"
				},
				{
					"dataset": {
						"referenceName": "PriceAPIcollection",
						"type": "DatasetReference"
					},
					"name": "Pricecollection"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "FinalBCHtrading",
						"type": "DatasetReference"
					},
					"name": "FinalFeed"
				}
			],
			"transformations": [
				{
					"name": "RSSscore"
				},
				{
					"name": "Join1"
				},
				{
					"name": "Join2"
				},
				{
					"name": "RedditScores"
				},
				{
					"name": "Join3"
				},
				{
					"name": "FinalDataAggregate"
				},
				{
					"name": "PriceHistory"
				},
				{
					"name": "RSSaggregate"
				},
				{
					"name": "RedditAggregate"
				},
				{
					"name": "PriceAggregate"
				}
			],
			"script": "source(output(\n\t\tCalendarDate as date,\n\t\tCalendarDatetime as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT  * FROM [dbo].[Calendar]\\nWHERE  CalendarDate = convert(date, getdate(), 1) ',\n\tformat: 'query') ~> Calendar\nsource(output(\n\t\tdate as timestamp,\n\t\t{sentiment score} as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tquery: 'SELECT RSSparsedBCHnews.date,\\nRSSparsedBCHnews[\"sentiment score\"] \\n\\n FROM RSSparsedBCHnews\\nWHERE RSSparsedBCHnews.date  != null',\n\tformat: 'documentQuery',\n\tsystemColumns: false) ~> RSSparseSource\nsource(output(\n\t\tDate as timestamp,\n\t\t{body sentiment score} as double,\n\t\t{title sentiment score} as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tquery: 'SELECT APIparsedBCHnews.Date,\\nAPIparsedBCHnews[\"title sentiment score\"],\\nAPIparsedBCHnews[\"body sentiment score\"]\\nFROM APIparsedBCHnews\\nWHERE APIparsedBCHnews.Date  != null',\n\tformat: 'documentQuery',\n\tsystemColumns: false) ~> RedditparseSource\nsource(output(\n\t\tlast_trade_price as double,\n\t\ttimestamp as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'document') ~> Pricecollection\nRSSparseSource derive(date = toDate(date)) ~> RSSscore\nCalendar, RedditAggregate join(CalendarDate == Date,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join1\nJoin1, RSSaggregate join(CalendarDate == RSSaggregate@date,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join2\nRedditparseSource derive(Date = toDate(Date)) ~> RedditScores\nJoin2, PriceAggregate join(CalendarDate == timestamp,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join3\nJoin3 aggregate(groupBy(CalendarDate),\n\tlast_trade_price = mean(last_trade_price),\n\t\ttotal_sentiment = (mean(iifNull({sentiment score},0))+mean(iifNull({body sentiment score},0))+mean(iifNull({title sentiment score},0))) / (countIf(iifNull({sentiment score},0)!=0,1) + countIf(iifNull({body sentiment score},0)!=0,1) + countIf(iifNull({title sentiment score},0)!=0,1))) ~> FinalDataAggregate\nPricecollection derive(timestamp = toDate(timestamp)) ~> PriceHistory\nRSSscore aggregate(groupBy(date),\n\t{sentiment score} = mean({sentiment score})) ~> RSSaggregate\nRedditScores aggregate(groupBy(Date),\n\t{body sentiment score} = mean({body sentiment score}),\n\t\t{title sentiment score} = mean({title sentiment score})) ~> RedditAggregate\nPriceHistory aggregate(groupBy(timestamp),\n\tlast_trade_price = mean(last_trade_price)) ~> PriceAggregate\nFinalDataAggregate sink(input(\n\t\tTradeDate as date,\n\t\tBCHprice as double,\n\t\tFinalSentiment as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tTradeDate = CalendarDate,\n\t\tBCHprice = last_trade_price,\n\t\tFinalSentiment = total_sentiment\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> FinalFeed"
		}
	}
}